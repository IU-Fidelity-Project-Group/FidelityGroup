from langflow.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES, parse_text_file_to_data
from langflow.base.io.chat import ChatComponent
from langflow.inputs import BoolInput
from langflow.io import (
    DropdownInput,
    FileInput,
    MessageTextInput,
    MultilineInput,
    Output,
)
from langflow.schema.message import Message


class UnifiedChatInput(ChatComponent):
    display_name = "Security Role Selector & Analyzer"
    description = "Single module for user input, persona selection, and file upload with processing."
    icon = "MessagesSquare"
    name = "Security Role Selector & Analyzer"
    minimized = True

    inputs = [
        MultilineInput(
            name="input_value",
            display_name="Text",
            value="What would you like to ask or summarize?",
            info="Message to be passed as input.",
            input_types=[],
        ),
        BoolInput(
            name="should_store_message",
            display_name="Store Messages",
            info="Store the message in the history.",
            value=True,
            advanced=True,
        ),
        DropdownInput(
            name="persona",
            display_name="Persona",
            options=[
                "Application Security Analyst",
                "Cyber Risk Analyst / CISO / ISO",
                "DLP / Insider Threat Analyst",
                "Malware Analyst",
                "Network Security Analyst",
                "Threat Intelligence Analyst",
                "Vendor Security Specialist",
            ],
            info="Please Select a Cybersecurity Persona.",
            advanced=False,
        ),
        MessageTextInput(
            name="sender_name",
            display_name="Sender Name",
            info="Name of the sender.",
            value="User",
            advanced=True,
        ),
        MessageTextInput(
            name="session_id",
            display_name="Session ID",
            info="The session ID of the chat. If empty, the current session ID parameter will be used.",
            advanced=True,
        ),
        FileInput(
            name="files",
            display_name="Files",
            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,
            info="Files to be sent with the message.",
            advanced=False,
            is_list=True,
        ),
        MessageTextInput(
            name="background_color",
            display_name="Background Color",
            info="The background color of the icon.",
            advanced=True,
        ),
        MessageTextInput(
            name="chat_icon",
            display_name="Icon",
            info="The icon of the message.",
            advanced=True,
        ),
        MessageTextInput(
            name="text_color",
            display_name="Text Color",
            info="The text color of the name.",
            advanced=True,
        ),
    ]

    outputs = [
        Output(display_name="Message", name="message", method="message_response"),
    ]

    def parse_uploaded_files(self, file_list):
        """Parses uploaded files and returns their text content."""
        parsed_results = []
        for file in file_list:
            try:
                parsed_data = parse_text_file_to_data(str(file.path))
                parsed_results.append(parsed_data.text if parsed_data else "")
            except Exception as e:
                self.log(f"Failed to parse file {file.path}: {e}")
        return parsed_results

    async def message_response(self) -> Message:
        background_color = self.background_color
        text_color = self.text_color
        icon = self.chat_icon

        parsed_files = self.parse_uploaded_files(self.files)

        message = await Message.create(
            text=self.input_value,
            sender=self.sender,
            sender_name=self.sender_name,
            session_id=self.session_id,
            files=self.files,
            properties={
                "background_color": background_color,
                "text_color": text_color,
                "icon": icon,
                "persona": self.persona,
                "parsed_files": parsed_files,
            },
        )
        if self.session_id and isinstance(message, Message) and self.should_store_message:
            stored_message = await self.send_message(message)
            self.message.value = stored_message
            message = stored_message

        self.status = message
        return message
